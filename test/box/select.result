print('eselect')
---
...
s = box.schema.create_space('eselect', { temporary = true })
---
...
index = s:create_index('primary', { type = 'tree' })
---
...
s:create_index('second', { type = 'tree', unique = true,  parts = {1, 'num', 0, 'num'}})
---
...
for i = 1, 20 do s:insert({ i, 1, 2, 3 }) end
---
...
s.index[0]:eselect(nil, { iterator = 'ALL', offset = 0, limit = 4294967295 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:eselect({}, { iterator = 'ALL', offset = 0, limit = 4294967295 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:eselect(1)
---
- [1, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = box.index.EQ })
---
- [1, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'EQ' })
---
- [1, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'GE' })
---
- error: More than one tuple found without 'limit'
...
s.index[0]:eselect(1, { iterator = 'GE', limit = 2 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'LE', limit = 2 })
---
- - [1, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'GE', offset = 10, limit = 2 })
---
- - [11, 1, 2, 3]
  - [12, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'GE', grep = function(t) if math.fmod(t[1], 2) == 0 then return true end end, limit = 2 })
---
- - [2, 1, 2, 3]
  - [4, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'GE', grep = function(t) if math.fmod(t[1], 2) == 0 then return true end end, limit = 2, offset = 1 })
---
- - [4, 1, 2, 3]
  - [6, 1, 2, 3]
...
s.index[0]:eselect(1, { iterator = 'GE', grep = function(t) if math.fmod(t[1], 2) == 0 then return true end end, limit = 2, offset = 1, map = function(t) return { t[1] } end })
---
- - - 4
  - - 6
...
s:eselect(2)
---
- [2, 1, 2, 3]
...
--------------------------------------------------------------------------------
-- get tests
--------------------------------------------------------------------------------
s.index[0]:get()
---
- error: More than one tuple found by get()
...
s.index[0]:get({})
---
- error: More than one tuple found by get()
...
s.index[0]:get(nil)
---
- error: More than one tuple found by get()
...
s.index[0]:get(1)
---
- [1, 1, 2, 3]
...
s.index[0]:get({1})
---
- [1, 1, 2, 3]
...
s.index[0]:get({1, 2})
---
- error: Invalid key part count (expected [0..1], got 2)
...
s.index[0]:get(0)
---
...
s.index[0]:get({0})
---
...
s.index[0]:get("0")
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
s.index[0]:get({"0"})
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
s.index[1]:get(1)
---
- error: More than one tuple found by get()
...
s.index[1]:get({1})
---
- error: More than one tuple found by get()
...
s.index[1]:get({1, 2})
---
- [2, 1, 2, 3]
...
--------------------------------------------------------------------------------
-- select tests
--------------------------------------------------------------------------------
s.index[0]:select()
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select({})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select(nil)
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select({}, {iterator = 'ALL'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = box.index.ALL })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select({}, {iterator = box.index.ALL, limit = 10})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = box.index.ALL, limit = 0})
---
- []
...
s.index[0]:select({}, {iterator = 'ALL', limit = 1, offset = 15})
---
- - [16, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = 'ALL', limit = 20, offset = 15})
---
- - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = box.index.EQ})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select({}, {iterator = 'EQ'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = 'REQ'})
---
- - [20, 1, 2, 3]
  - [19, 1, 2, 3]
  - [18, 1, 2, 3]
  - [17, 1, 2, 3]
  - [16, 1, 2, 3]
  - [15, 1, 2, 3]
  - [14, 1, 2, 3]
  - [13, 1, 2, 3]
  - [12, 1, 2, 3]
  - [11, 1, 2, 3]
  - [10, 1, 2, 3]
  - [9, 1, 2, 3]
  - [8, 1, 2, 3]
  - [7, 1, 2, 3]
  - [6, 1, 2, 3]
  - [5, 1, 2, 3]
  - [4, 1, 2, 3]
  - [3, 1, 2, 3]
  - [2, 1, 2, 3]
  - [1, 1, 2, 3]
...
s.index[0]:select({}, {iterator = box.index.REQ})
---
- - [20, 1, 2, 3]
  - [19, 1, 2, 3]
  - [18, 1, 2, 3]
  - [17, 1, 2, 3]
  - [16, 1, 2, 3]
  - [15, 1, 2, 3]
  - [14, 1, 2, 3]
  - [13, 1, 2, 3]
  - [12, 1, 2, 3]
  - [11, 1, 2, 3]
  - [10, 1, 2, 3]
  - [9, 1, 2, 3]
  - [8, 1, 2, 3]
  - [7, 1, 2, 3]
  - [6, 1, 2, 3]
  - [5, 1, 2, 3]
  - [4, 1, 2, 3]
  - [3, 1, 2, 3]
  - [2, 1, 2, 3]
  - [1, 1, 2, 3]
...
s.index[0]:select(nil, {iterator = 'EQ', limit = 2, offset = 1})
---
- - [2, 1, 2, 3]
  - [3, 1, 2, 3]
...
s.index[0]:select({}, {iterator = box.index.REQ, limit = 2, offset = 1})
---
- - [19, 1, 2, 3]
  - [18, 1, 2, 3]
...
s.index[0]:select(1)
---
- - [1, 1, 2, 3]
...
s.index[0]:select({1})
---
- - [1, 1, 2, 3]
...
s.index[0]:select({1, 2})
---
- error: Invalid key part count (expected [0..1], got 2)
...
s.index[0]:select(0)
---
- []
...
s.index[0]:select({0})
---
- []
...
s.index[0]:select("0")
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
s.index[0]:select({"0"})
---
- error: 'Supplied key type of part 0 does not match index part type: expected NUM'
...
s.index[1]:select(1)
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[1]:select({1})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[1]:select({1}, {limit = 2})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
...
s.index[1]:select(1, {iterator = 'EQ'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
s.index[1]:select({1}, {iterator = box.index.EQ, offset = 16, limit = 2})
---
- - [17, 1, 2, 3]
  - [18, 1, 2, 3]
...
s.index[1]:select({1}, {iterator = box.index.REQ, offset = 16, limit = 2 })
---
- - [4, 1, 2, 3]
  - [3, 1, 2, 3]
...
s.index[1]:select({1, 2}, {iterator = 'EQ'})
---
- - [2, 1, 2, 3]
...
s.index[1]:select({1, 2}, {iterator = box.index.REQ})
---
- - [2, 1, 2, 3]
...
s.index[1]:select({1, 2})
---
- - [2, 1, 2, 3]
...
s:drop()
---
...
