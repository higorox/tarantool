-- box.tuple test
-- Test box.tuple:slice()
t=box.tuple.new{'0', '1', '2', '3', '4', '5', '6', '7'}
---
...
t:slice(0)
---
- '0'
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-1)
---
- '7'
...
t:slice(1)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-1, -1)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(-1, 1)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(1, -1)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
...
t:slice(1, 3)
---
- '1'
- '2'
...
t:slice(7)
---
- '7'
...
t:slice(8)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(9)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(100500)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(9, -1)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(6, -1)
---
- '6'
...
t:slice(4, 4)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(6, 4)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(0, 0)
---
- error: 'tuple.slice(): end > field count'
...
t:slice(9, 10)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(-7)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-8)
---
- '0'
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-9)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(-100500)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(500, 700)
---
- error: 'tuple.slice(): start >= field count'
...
--  box.tuple.new test
box.tuple.new()
---
- []
...
box.tuple.new(1)
---
- [1]
...
box.tuple.new('string')
---
- ['string']
...
box.tuple.new(tonumber64('18446744073709551615'))
---
- [18446744073709551615]
...
box.tuple.new{tonumber64('18446744073709551615'), 'string', 1}
---
- [18446744073709551615, 'string', 1]
...
--  A test case for Bug#1131108 'incorrect conversion from boolean lua value to tarantool tuple'
function bug1075677() local range = {} table.insert(range, 1>0) return range end
---
...
box.tuple.new(bug1075677())
---
- [true]
...
bug1075677=nil
---
...
-- boolean values in a tuple
box.tuple.new(false)
---
- [false]
...
box.tuple.new({false})
---
- [false]
...
-- tuple:bsize()
t = box.tuple.new('abc')
---
...
t
---
- ['abc']
...
t:bsize()
---
- 5
...
--
-- Test cases for #106 box.tuple.new fails on multiple items
--
box.tuple.new()
---
- []
...
box.tuple.new{}
---
- []
...
box.tuple.new(1)
---
- [1]
...
box.tuple.new{1}
---
- [1]
...
box.tuple.new(1, 2, 3, 4, 5)
---
- [1, 2, 3, 4, 5]
...
box.tuple.new{1, 2, 3, 4, 5}
---
- [1, 2, 3, 4, 5]
...
box.tuple.new({'a', 'b'}, {'c', 'd'}, {'e', 'f'})
---
- [['a', b], ['c', 'd'], ['e', 'f']]
...
box.tuple.new{{'a', 'b'}, {'c', 'd'}, {'e', 'f'}}
---
- [['a', b], ['c', 'd'], ['e', 'f']]
...
box.tuple.new({1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6})
---
- [[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new{{1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6}}
---
- [[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new('x', 'y', 'z', {1, 2}, {c = 3, d = 4}, {e = 5, f = 6})
---
- ['x', 'y', 'z', [1, 2], {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new{'x', 'y', 'z', {1, 2}, {c = 3, d = 4}, {e = 5, f = 6}}
---
- ['x', 'y', 'z', [1, 2], {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
--
-- A test case for #107 "box.tuple.unpack asserts on extra arguments"
--
t=box.tuple.new{'a','b','c'}
---
...
t:unpack(5)
---
- a
- b
- c
...
t:unpack(1, 2, 3, 4, 5)
---
- a
- b
- c
...
--
-- Check that tuple:totable correctly sets serializer hints
--
box.tuple.new{1, 2, 3}:totable()
---
- [1, 2, 3]
...
getmetatable(box.tuple.new{1, 2, 3}:totable())
---
- _serializer_compact: true
...
--  A test case for the key as an tuple
space = box.schema.create_space('tweedledum')
---
...
space:create_index('primary')
---
...
space:truncate()
---
...
t=space:insert{0, 777, '0', '1', '2', '3'}
---
...
t
---
- [0, 777, '0', '1', '2', '3']
...
space:replace(t)
---
- [0, 777, '0', '1', '2', '3']
...
space:replace{777, { 'a', 'b', 'c', {'d', 'e', t}}}
---
- [777, ['a', 'b', 'c', ['d', 'e', [0, 777, '0', '1', '2', '3']]]]
...
--  A test case for tuple:totable() method
t=space:get{777}:totable()
---
...
t[2], t[3], t[4], t[5]
---
- - a
  - b
  - c
  - - d
    - e
    - - 0
      - 777
      - '0'
      - '1'
      - '2'
      - '3'
- null
- null
- null
...
space:truncate()
---
...
--  A test case for Bug#1119389 '(lbox_tuple_index) crashes on 'nil' argument'
t=space:insert{0, 8989}
---
...
t[nil]
---
- null
...
--------------------------------------------------------------------------------
-- test tuple:next
--------------------------------------------------------------------------------
t = box.tuple.new({'a', 'b', 'c'})
---
...
state, val = t:next()
---
...
state, val
---
- 1
- a
...
state, val = t:next(state)
---
...
state, val
---
- 2
- b
...
state, val = t:next(state)
---
...
state, val
---
- 3
- c
...
state, val = t:next(state)
---
...
state, val
---
- null
- null
...
t:next(nil)
---
- 1
- a
...
t:next(0)
---
- 1
- a
...
t:next(1)
---
- 2
- b
...
t:next(2)
---
- 3
- c
...
t:next(3)
---
- null
...
t:next(4)
---
- error: '[string "-- tuple.lua (internal file)..."]:65: error: invalid key to ''next'''
...
t:next(-1)
---
- error: '[string "-- tuple.lua (internal file)..."]:65: error: invalid key to ''next'''
...
t:next("fdsaf")
---
- error: '[string "-- tuple.lua (internal file)..."]:48: error: invalid key to ''next'''
...
box.tuple.new({'x', 'y', 'z'}):next()
---
- 1
- x
...
t=space:insert{1953719668}
---
...
t:next(1684234849)
---
- error: '[string "-- tuple.lua (internal file)..."]:65: error: invalid key to ''next'''
...
t:next(1)
---
- null
...
t:next(nil)
---
- 1
- 1953719668
...
t:next(t:next())
---
- null
...
--------------------------------------------------------------------------------
-- test tuple:pairs
--------------------------------------------------------------------------------
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
...
t=space:replace{1953719668, 'another field'}
---
...
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
  - another field
...
t=space:replace{1953719668, 'another field', 'one more'}
---
...
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
  - another field
  - one more
...
t=box.tuple.new({'a', 'b', 'c', 'd'})
---
...
ta = {} for it,field in t:pairs() do table.insert(ta, field); end
---
...
ta
---
- - a
  - b
  - c
  - d
...
t = box.tuple.new({'a', 'b', 'c'})
---
...
gen, init, state = t:pairs()
---
...
gen, init, state
---
- <tuple iterator>
- ['a', 'b', 'c']
- null
...
state, val = gen(init, state)
---
...
state, val
---
- 1
- a
...
state, val = gen(init, state)
---
...
state, val
---
- 2
- b
...
state, val = gen(init, state)
---
...
state, val
---
- 3
- c
...
state, val = gen(init, state)
---
...
state, val
---
- null
- null
...
r = {}
---
...
for _state, val in t:pairs() do table.insert(r, val) end
---
...
r
---
- - a
  - b
  - c
...
r = {}
---
...
for _state, val in t:pairs() do table.insert(r, val) end
---
...
r
---
- - a
  - b
  - c
...
r = {}
---
...
for _state, val in t:pairs(1) do table.insert(r, val) end
---
...
r
---
- - b
  - c
...
r = {}
---
...
for _state, val in t:pairs(3) do table.insert(r, val) end
---
...
r
---
- []
...
r = {}
---
...
for _state, val in t:pairs(10) do table.insert(r, val) end
---
- error: '[string "-- tuple.lua (internal file)..."]:65: error: invalid key to ''next'''
...
r
---
- []
...
r = {}
---
...
for _state, val in t:pairs(nil) do table.insert(r, val) end
---
...
r
---
- - a
  - b
  - c
...
t:pairs(nil)
---
- <tuple iterator>
- ['a', 'b', 'c']
- null
...
t:pairs("fdsaf")
---
- <tuple iterator>
- ['a', 'b', 'c']
- fdsaf
...
space:drop()
---
...
