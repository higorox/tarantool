space = box.schema.create_space('tweedledum')
---
...
space:create_index('primary', { type = 'hash' })
---
...
-- A test case for a race condition between ev_schedule
-- and wal_schedule fiber schedulers.
-- The same fiber should not be scheduled by ev_schedule (e.g.
-- due to cancellation) if it is within th wal_schedule queue.
-- The test case is dependent on rows_per_wal, since this is when
-- we reopen the .xlog file and thus wal_scheduler takes a long
-- pause
box.cfg.rows_per_wal
---
- 50
...
space:insert{1, 'testing', 'lua rocks'}
---
- [1, 'testing', 'lua rocks']
...
space:delete{1}
---
- [1, 'testing', 'lua rocks']
...
space:insert{1, 'testing', 'lua rocks'}
---
- [1, 'testing', 'lua rocks']
...
space:delete{1}
---
- [1, 'testing', 'lua rocks']
...
space:insert{1, 'test box delete'}
---
- [1, 'test box delete']
...
space:delete{1}
---
- [1, 'test box delete']
...
space:insert{1, 'test box delete'}
---
- [1, 'test box delete']
...
space:delete{1}
---
- [1, 'test box delete']
...
space:insert{1684234849, 'test box delete'}
---
- [1684234849, 'test box delete']
...
space:delete{1684234849}
---
- [1684234849, 'test box delete']
...
space:insert{1684234849, 'test box delete'}
---
- [1684234849, 'test box delete']
...
space:delete{1684234849}
---
- [1684234849, 'test box delete']
...
space:insert{1684234849, 'test box.select()'}
---
- [1684234849, 'test box.select()']
...
space:replace{1684234849, 'hello', 'world'}
---
- [1684234849, 'hello', 'world']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1667655012, 'goodbye', 'universe'}
---
- [1667655012, 'goodbye', 'universe']
...
space:replace{1684234849}
---
- [1684234849]
...
space:delete{1684234849}
---
- [1684234849]
...
space:delete{1667655012}
---
- [1667655012, 'goodbye', 'universe']
...
space:insert{1953719668, 'old', 1684234849}
---
- [1953719668, 'old', 1684234849]
...
-- test that insert produces a duplicate key error
space:insert{1953719668, 'old', 1684234849}
---
- error: Duplicate key exists in unique index 0
...
space:update(1953719668, {{'=', 0, 1936941424}, {'=', 1, 'new'}})
---
- [1936941424, 'new', 1684234849]
...
space:update(1234567890, {{'+', 2, 1}})
---
...
space:update(1936941424, {{'+', 2, 1}})
---
- [1936941424, 'new', 1684234850]
...
space:update(1936941424, {{'-', 2, 1}})
---
- [1936941424, 'new', 1684234849]
...
space:update(1936941424, {{'-', 2, 1}})
---
- [1936941424, 'new', 1684234848]
...
space:update(1936941424, {{'+', 2, 1}})
---
- [1936941424, 'new', 1684234849]
...
space:delete{1936941424}
---
- [1936941424, 'new', 1684234849]
...
box.cfg.reload()
---
- ok
...
-- must be read-only
space:insert{1953719668}
---
- [1953719668]
...
space:insert{1684234849}
---
- [1684234849]
...
space:delete{1953719668}
---
- [1953719668]
...
space:delete{1684234849}
---
- [1684234849]
...
space:insert{1953719668, 'hello world'}
---
- [1953719668, 'hello world']
...
space:update(1953719668, {{'=', 1, 'bye, world'}})
---
- [1953719668, 'bye, world']
...
space:delete{1953719668}
---
- [1953719668, 'bye, world']
...
-- test tuple iterators
t = space:insert{1953719668}
---
...
t = space:replace{1953719668, 'another field'}
---
...
t = space:replace{1953719668, 'another field', 'one more'}
---
...
space:truncate()
---
...
-- test passing arguments in and out created fiber
--# setopt delimiter ';'
function y()
    box.fiber.detach('started')
    space = box.space['tweedledum']
    while true do
        space:replace{1953719668, os.time()}
        box.fiber.sleep(0.001)
    end
end;
---
...
f = box.fiber.create(y);
---
...
box.fiber.resume(f);
---
- started
...
box.fiber.sleep(0.002);
---
...
box.fiber.cancel(f);
---
...
box.fiber.resume(f);
---
- error: 'fiber.resume(): the fiber is dead'
...
for k = 1, 1000, 1 do
    box.fiber.create(
        function()
            box.fiber.detach()
        end
    )
end;
---
...
--# setopt delimiter ''
collectgarbage('collect')
---
- 0
...
-- check that these newly created fibers are garbage collected
box.fiber.find(900)
---
- null
...
box.fiber.find(910)
---
- null
...
box.fiber.find(920)
---
- null
...
box.fiber.find()
---
- error: 'fiber.find(id): bad arguments'
...
box.fiber.find('test')
---
- null
...
--  https://github.com/tarantool/tarantool/issues/131
--  box.fiber.resume(box.fiber.cancel()) -- hang
f = box.fiber.create(function() box.fiber.cancel(box.fiber.self()) end)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the child fiber got cancelled'
...
f = nil
---
...
-- https://github.com/tarantool/tarantool/issues/119
ftest = function() box.fiber.sleep(0.01 * math.random() ) return true end
---
...
--# setopt delimiter ';'
for i = 1, 10 do
    result = {}
    for j = 1, 300 do
        box.fiber.resume(box.fiber.create(function()
            box.fiber.detach()
            table.insert(result, ftest())
        end))
    end
    while #result < 300 do box.fiber.sleep(0.01) end
end;
---
...
--# setopt delimiter ''
#result
---
- 300
...
--# setopt delimiter ''
--
-- 
--  Test box.fiber.wrap()
-- 
--  This should try to infinitely create fibers,
--  but hit the fiber stack size limit and fail
--  with an error.
f = function() box.fiber.wrap(f) end
---
...
f()
---
...
-- 
-- Test argument passing
-- 
f = function(a, b) box.fiber.wrap(function(arg) result = arg end, a..b) end
---
...
f('hello ', 'world')
---
...
result
---
- hello world
...
f('bye ', 'world')
---
...
result
---
- bye world
...
-- 
-- Test that the created fiber is detached
-- 
box.fiber.wrap(function() result = box.fiber.status() end)
---
- null
...
result
---
- running
...
-- A test case for Bug#933487
-- tarantool crashed during shutdown if non running LUA fiber
-- was created
f = box.fiber.create(function () return true end)
---
...
box.snapshot()
---
- ok
...
box.snapshot()
---
- error: can't save snapshot, errno 17 (File exists)
...
box.snapshot()
---
- error: can't save snapshot, errno 17 (File exists)
...
box.fiber.resume(f)
---
- true
- true
...
f = box.fiber.create(function () return true end)
---
...
box.fiber.sleep(0)
---
...
box.fiber.sleep(0.01)
---
...
box.fiber.sleep(0.0001)
---
...
box.fiber.sleep('hello')
---
- error: 'fiber.sleep(delay): bad arguments'
...
box.fiber.sleep(box, 0.001)
---
- error: 'fiber.sleep(delay): bad arguments'
...
box.fiber.cancel(box.fiber.self())
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
f = box.fiber.self()
---
...
old_id = f:id()
---
...
box.fiber.cancel(f)
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
box.fiber.self():id() - old_id < 3
---
- true
...
box.fiber.cancel(box.fiber.self())
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
box.fiber.self():id() - old_id < 5
---
- true
...
g = box.fiber.self()
---
...
f==g
---
- true
...
function r() f = box.fiber.create(r) return (box.fiber.resume(f)) end
---
...
r()
---
- true
...
f = box.fiber.create(print('hello')
---
- error: '[string "f = box.fiber.create(print(''hello'') "]:1: '')'' expected near
    ''<eof>'''
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
-- test passing arguments in and out created fiber
function r(a, b) return a, b end
---
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- true
- null
- null
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello')
---
- true
- hello
- null
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello', 'world')
---
- true
- hello
- world
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello', 'world', 'wide')
---
- true
- hello
- world
...
function y(a, b) c=box.fiber.yield(a) return box.fiber.yield(b, c) end
---
...
f=box.fiber.create(y)
---
...
box.fiber.resume(f, 'hello', 'world')
---
- hello
...
box.fiber.resume(f, 'wide')
---
- world
- wide
...
box.fiber.resume(f)
---
- true
...
function y() box.fiber.detach() while true do box.replace(0, 1953719668, os.time()) box.fiber.sleep(0.001) end end
---
...
f = box.fiber.create(y)
---
...
box.fiber.resume(f)
---
...
box.fiber.sleep(0.002)
---
...
box.fiber.cancel(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
f=nil
---
...
for k=1, 10000, 1 do box.fiber.create(function() box.fiber.detach() end) end
---
...
collectgarbage('collect')
---
- 0
...
-- check that these newly created fibers are garbage collected
box.fiber.find(9000)
---
- null
...
box.fiber.find(9010)
---
- null
...
box.fiber.find(9020)
---
- null
...
--  test box.fiber.status functions: invalid arguments
box.fiber.status(1)
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got number)'
...
box.fiber.status('fafa-gaga')
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got string)'
...
box.fiber.status(nil)
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got nil)'
...
--  A test case for Bug#911641 box.fiber.sleep() works incorrectly if
--  a fiber is attached.
function r() return box.fiber.sleep(0.01) end
---
...
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- true
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
--# setopt delimiter ';'
function r()
    box.fiber.yield(box.space.tweedledum:insert{0, 0, 1})
    box.fiber.yield(box.space.tweedledum:get{0})
    box.fiber.yield(box.space.tweedledum:truncate())
end;
---
...
--# setopt delimiter ''
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- [0, 0, 1]
...
box.fiber.resume(f)
---
- [0, 0, 1]
...
box.fiber.resume(f)
---
...
box.fiber.resume(f)
---
- true
...
function r() return box.fiber.yield(box.fiber.create(r)) end
---
...
f = r()
---
...
f1 = box.fiber.resume(f)
---
...
f2 = box.fiber.resume(f1)
---
...
f3 = box.fiber.resume(f2)
---
...
f4 = box.fiber.resume(f3)
---
...
f5 = box.fiber.resume(f4)
---
...
f6 = box.fiber.resume(f5)
---
...
f7 = box.fiber.resume(f6)
---
...
f8 = box.fiber.resume(f7)
---
...
f9 = box.fiber.resume(f8)
---
...
f10 = box.fiber.resume(f9)
---
...
f11 = box.fiber.resume(f10)
---
...
f12 = box.fiber.resume(f11)
---
...
f13 = box.fiber.resume(f12)
---
...
f14 = box.fiber.resume(f13)
---
...
f15 = box.fiber.resume(f14)
---
...
f16 = box.fiber.resume(f15)
---
...
f17 = box.fiber.resume(f16)
---
...
box.fiber.resume(f)
---
- true
...
box.fiber.resume(f1)
---
- true
...
box.fiber.resume(f2)
---
- true
...
box.fiber.resume(f3)
---
- true
...
box.fiber.resume(f4)
---
- true
...
box.fiber.resume(f5)
---
- true
...
box.fiber.resume(f6)
---
- true
...
box.fiber.resume(f7)
---
- true
...
box.fiber.resume(f8)
---
- true
...
box.fiber.resume(f9)
---
- true
...
box.fiber.resume(f10)
---
- true
...
box.fiber.resume(f11)
---
- true
...
box.fiber.resume(f12)
---
- true
...
box.fiber.resume(f13)
---
- true
...
box.fiber.resume(f14)
---
- true
...
box.fiber.resume(f15)
---
- true
...
box.fiber.resume(f16)
---
- true
...
f17 = nil
---
...
function r() box.fiber.detach() box.fiber.sleep(1000) end
---
...
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): can''t resume a detached fiber'
...
box.fiber.cancel(f)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
--  Test box.fiber.name()
old_name = box.fiber.name()
---
...
box.fiber.name() == old_name
---
- true
...
box.fiber.self():name() == old_name
---
- true
...
box.fiber.name('hello fiber')
---
...
box.fiber.name()
---
- hello fiber
...
box.fiber.self():name('bye fiber')
---
...
box.fiber.self():name()
---
- bye fiber
...
box.fiber.self():name(old_name)
---
...
space:drop()
---
...
-- box.fiber test (create, resume, yield, status)
dofile("fiber.lua")
---
...
-- print run fiber's test
box_fiber_run_test()
---
- - 'tester: status(tester) = running'
  - 'tester: status(printer) = suspended'
  - 'count: 1'
  - 'printer: tester status = normal'
  - 'printer: printer status = running'
  - 'A: odd  1'
  - 'status: suspended'
  - 'count: 2'
  - 'B: odd  1'
  - 'C: event  2'
  - 'status: suspended'
  - 'count: 3'
  - 'A: odd  3'
  - 'status: suspended'
  - 'count: 4'
  - 'B: odd  3'
  - 'C: event  4'
  - 'D: event  4'
  - 'A: odd  5'
  - 'status: suspended'
  - 'count: 5'
  - 'B: odd  5'
  - 'status: dead'
...
function testfun() while true do box.fiber.sleep(10) end end
---
...
f = box.fiber.wrap(testfun)
---
...
f:cancel()
---
...
f:resume()
---
- error: 'fiber.resume(): the fiber is dead'
...
fib_id = box.fiber.wrap(testfun):id()
---
...
box.fiber.find(fib_id):cancel()
---
...
box.fiber.find(fib_id)
---
- null
...
