dofile('utils.lua')
---
...
s0 = box.schema.create_space('tweedledum')
---
...
s0:create_index('primary', { type = 'tree', parts = {0, 'num'}, unique = true })
---
...
-- integer keys
s0:insert{1, 'tuple'}
---
- [1, 'tuple']
...
box.snapshot()
---
- ok
...
s0:insert{2, 'tuple 2'}
---
- [2, 'tuple 2']
...
box.snapshot()
---
- ok
...
s0:insert{3, 'tuple 3'}
---
- [3, 'tuple 3']
...
s0.index['primary']:get{1}
---
- [1, 'tuple']
...
s0.index['primary']:get{2}
---
- [2, 'tuple 2']
...
s0.index['primary']:get{3}
---
- [3, 'tuple 3']
...
-- Cleanup
s0:delete{1}
---
- [1, 'tuple']
...
s0:delete{2}
---
- [2, 'tuple 2']
...
s0:delete{3}
---
- [3, 'tuple 3']
...
-- Test incorrect keys - supplied key field type does not match index type
-- https://bugs.launchpad.net/tarantool/+bug/1072624
s0:insert{'xxxxxxx'}
---
- error: 'Tuple field 0 type does not match one required by operation: expected NUM'
...
s0:insert{''}
---
- error: 'Tuple field 0 type does not match one required by operation: expected NUM'
...
s0:insert{'12'}
---
- error: 'Tuple field 0 type does not match one required by operation: expected NUM'
...
s1 = box.schema.create_space('tweedledee')
---
...
s1:create_index('primary', { type = 'tree', parts = {0, 'str'}, unique = true })
---
...
s2 = box.schema.create_space('alice')
---
...
s2:create_index('primary', { type = 'tree', parts = {0, 'str'}, unique = true })
---
...
-- string keys
s1:insert{'identifier', 'tuple'}
---
- ['identifier', 'tuple']
...
box.snapshot()
---
- ok
...
s1:insert{'second', 'tuple 2'}
---
- ['second', 'tuple 2']
...
box.snapshot()
---
- ok
...
s1.index['primary']:eselect('second', { limit = 100, iterator = 'GE' })
---
- - ['second', 'tuple 2']
...
s1.index['primary']:eselect('identifier', { limit = 100, iterator = 'GE' })
---
- - ['identifier', 'tuple']
  - ['second', 'tuple 2']
...
s1:insert{'third', 'tuple 3'}
---
- ['third', 'tuple 3']
...
s1.index['primary']:get{'identifier'}
---
- ['identifier', 'tuple']
...
s1.index['primary']:get{'second'}
---
- ['second', 'tuple 2']
...
s1.index['primary']:get{'third'}
---
- ['third', 'tuple 3']
...
-- Cleanup
s1:delete{'identifier'}
---
- ['identifier', 'tuple']
...
s1:delete{'second'}
---
- ['second', 'tuple 2']
...
s1:delete{'third'}
---
- ['third', 'tuple 3']
...
--# setopt delimiter ';'
function crossjoin(space0, space1, limit)
    local result = {}
    for v0 in space0:iterator() do
        for v1 in space1:iterator() do
            if limit <= 0 then
                return result
            end
            newtuple = v0:totable()
            for _, v in v1:pairs() do
                table.insert(newtuple, v)
            end
            table.insert(result, box.tuple.new(newtuple))
            limit = limit - 1
        end
    end
    return result
end;
---
...
--# setopt delimiter ''
s2:insert{'1', 'tuple'}
---
- ['1', 'tuple']
...
s1:insert{'1', 'tuple'}
---
- ['1', 'tuple']
...
s1:insert{'2', 'tuple'}
---
- ['2', 'tuple']
...
crossjoin(s1, s1, 0)
---
- []
...
crossjoin(s1, s1, 5)
---
- - ['1', 'tuple', '1', 'tuple']
  - ['1', 'tuple', '2', 'tuple']
  - ['2', 'tuple', '1', 'tuple']
  - ['2', 'tuple', '2', 'tuple']
...
crossjoin(s1, s1, 10000)
---
- - ['1', 'tuple', '1', 'tuple']
  - ['1', 'tuple', '2', 'tuple']
  - ['2', 'tuple', '1', 'tuple']
  - ['2', 'tuple', '2', 'tuple']
...
crossjoin(s1, s2, 10000)
---
- - ['1', 'tuple', '1', 'tuple']
  - ['2', 'tuple', '1', 'tuple']
...
s1:truncate()
---
...
s2:truncate()
---
...
-- Bug #922520 - select missing keys
s0:insert{200, 'select me!'}
---
- [200, 'select me!']
...
s0.index['primary']:get{200}
---
- [200, 'select me!']
...
s0.index['primary']:get{199}
---
...
s0.index['primary']:get{201}
---
...
-- Test partially specified keys in TREE indexes
s1:insert{'abcd'}
---
- ['abcd']
...
s1:insert{'abcda'}
---
- ['abcda']
...
s1:insert{'abcda_'}
---
- ['abcda_']
...
s1:insert{'abcdb'}
---
- ['abcdb']
...
s1:insert{'abcdb_'}
---
- ['abcdb_']
...
s1:insert{'abcdb__'}
---
- ['abcdb__']
...
s1:insert{'abcdb___'}
---
- ['abcdb___']
...
s1:insert{'abcdc'}
---
- ['abcdc']
...
s1:insert{'abcdc_'}
---
- ['abcdc_']
...
box.sort(s1.index['primary']:eselect('abcdb', { limit = 3, iterator = 'GE' }))
---
- - ['abcdb']
  - ['abcdb_']
  - ['abcdb__']
...
s1:drop()
---
...
s1 = nil
---
...
s2:drop()
---
...
s2 = nil
---
...
--
-- tree::replace tests
--
s0:truncate()
---
...
s0:create_index('i1', { type = 'tree', parts = {1, 'num'}, unique = true })
---
...
s0:create_index('i2', { type = 'tree', parts = {2, 'num'}, unique = false })
---
...
s0:create_index('i3', { type = 'tree', parts = {3, 'num'}, unique = true })
---
...
s0:insert{0, 0, 0, 0}
---
- [0, 0, 0, 0]
...
s0:insert{1, 1, 1, 1}
---
- [1, 1, 1, 1]
...
s0:insert{2, 2, 2, 2}
---
- [2, 2, 2, 2]
...
-- OK
s0:replace{1, 1, 1, 1}
---
- [1, 1, 1, 1]
...
s0:replace{1, 10, 10, 10}
---
- [1, 10, 10, 10]
...
s0:replace{1, 1, 1, 1}
---
- [1, 1, 1, 1]
...
s0.index['primary']:get{10}
---
...
s0.index['i1']:select{10}
---
- []
...
s0.index['i2']:select{10}
---
- []
...
s0.index['i3']:select{10}
---
- []
...
s0.index['primary']:get{1}
---
- [1, 1, 1, 1]
...
s0.index['i1']:select{1}
---
- - [1, 1, 1, 1]
...
s0.index['i2']:select{1}
---
- - [1, 1, 1, 1]
...
s0.index['i3']:select{1}
---
- - [1, 1, 1, 1]
...
-- OK
s0:insert{10, 10, 10, 10}
---
- [10, 10, 10, 10]
...
s0:delete{10}
---
- [10, 10, 10, 10]
...
s0.index['primary']:get{10}
---
...
s0.index['i1']:select{10}
---
- []
...
s0.index['i2']:select{10}
---
- []
...
s0.index['i3']:select{10}
---
- []
...
-- TupleFound (primary key)
s0:insert{1, 10, 10, 10}
---
- error: Duplicate key exists in unique index 0
...
s0.index['primary']:get{10}
---
...
s0.index['i1']:select{10}
---
- []
...
s0.index['i2']:select{10}
---
- []
...
s0.index['i3']:select{10}
---
- []
...
s0.index['primary']:get{1}
---
- [1, 1, 1, 1]
...
-- TupleNotFound (primary key)
s0:replace{10, 10, 10, 10}
---
- [10, 10, 10, 10]
...
s0.index['primary']:get{10}
---
- [10, 10, 10, 10]
...
s0.index['i1']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i2']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{10}
---
- - [10, 10, 10, 10]
...
-- TupleFound (key #1)
s0:insert{10, 0, 10, 10}
---
- error: Duplicate key exists in unique index 0
...
s0.index['primary']:get{10}
---
- [10, 10, 10, 10]
...
s0.index['i1']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i2']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i1']:select{0}
---
- - [0, 0, 0, 0]
...
-- TupleFound (key #1)
s0:replace{2, 0, 10, 10}
---
- error: Duplicate key exists in unique index 1
...
s0.index['primary']:get{10}
---
- [10, 10, 10, 10]
...
s0.index['i1']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i2']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i1']:select{0}
---
- - [0, 0, 0, 0]
...
-- TupleFound (key #3)
s0:insert{10, 10, 10, 0}
---
- error: Duplicate key exists in unique index 0
...
s0.index['primary']:get{10}
---
- [10, 10, 10, 10]
...
s0.index['i1']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i2']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{0}
---
- - [0, 0, 0, 0]
...
-- TupleFound (key #3)
s0:replace{2, 10, 10, 0}
---
- error: Duplicate key exists in unique index 1
...
s0.index['primary']:get{10}
---
- [10, 10, 10, 10]
...
s0.index['i1']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i2']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{10}
---
- - [10, 10, 10, 10]
...
s0.index['i3']:select{0}
---
- - [0, 0, 0, 0]
...
-- Non-Uniq test (key #2)
s0:insert{4, 4, 0, 4}
---
- [4, 4, 0, 4]
...
s0:insert{5, 5, 0, 5}
---
- [5, 5, 0, 5]
...
s0:insert{6, 6, 0, 6}
---
- [6, 6, 0, 6]
...
s0:replace{5, 5, 0, 5}
---
- [5, 5, 0, 5]
...
box.sort(s0.index['i2']:select(0, { limit = 100 }))
---
- - [0, 0, 0, 0]
  - [4, 4, 0, 4]
  - [5, 5, 0, 5]
  - [6, 6, 0, 6]
...
s0:delete{5}
---
- [5, 5, 0, 5]
...
box.sort(s0.index['i2']:select(0, { limit = 100 }))
---
- - [0, 0, 0, 0]
  - [4, 4, 0, 4]
  - [6, 6, 0, 6]
...
s0:drop()
---
...
s0 = nil
---
...
-----------------------
-- Iterator corruption during data modification 1)skipping during deleteion
s = box.schema.create_space('test')
---
...
s:create_index('primary', { type = 'tree', parts = {0, 'num'}, unique = true })
---
...
ind = s.index['primary']
---
...
s:insert{4}
---
- [4]
...
s:insert{2}
---
- [2]
...
s:insert{6}
---
- [6]
...
s:insert{1}
---
- [1]
...
s:insert{3}
---
- [3]
...
s:insert{5}
---
- [5]
...
s:insert{7}
---
- [7]
...
s:insert{8}
---
- [8]
...
-- it seems that all elements will be deleted:
for t in ind:iterator() do s:delete{t[1]} end
---
...
-- but (oops) some elements are left in space:
iterate('test', 'primary', 0, 1)
---
- - $       5$
  - $       6$
  - $       7$
  - $       8$
...
-- cleanup
s:drop()
---
...
s = nil
---
...
-----------------------
-- Iterator corruption during data modification 2)skipping during insertion
s = box.schema.create_space('test')
---
...
s:create_index('primary', { type = 'tree', parts = {0, 'num'}, unique = true })
---
...
ind = s.index['primary']
---
...
s:insert{3}
---
- [3]
...
s:insert{2}
---
- [2]
...
s:insert{4} -- now you see me
---
- [4]
...
s:insert{1}
---
- [1]
...
itr = ind:iterator()
---
...
itr() -- 1
---
- [1]
...
itr() -- 2
---
- [2]
...
for i = 5,100 do s:insert{i} end
---
...
itr() -- 3
---
- [3]
...
itr() -- now you don't
---
- null
...
-- cleanup
s:drop()
---
...
s = nil
---
...
-----------------------
-- Iterator corruption during data modification 3)repeating during delete/insert
s = box.schema.create_space('test')
---
...
s:create_index('primary', { type = 'tree', parts = {0, 'num'}, unique = true })
---
...
ind = s.index['primary']
---
...
s:insert{2}
---
- [2]
...
s:insert{1}
---
- [1]
...
s:insert{3}
---
- [3]
...
itr = ind:iterator()
---
...
itr() -- 1
---
- [1]
...
s:delete{2}
---
- [2]
...
s:insert{0}
---
- [0]
...
itr() -- 1 again
---
- [1]
...
itr() -- null
---
- null
...
-- cleanup
s:drop()
---
...
s = nil
---
...
